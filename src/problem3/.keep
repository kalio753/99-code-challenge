import { useWalletBalances, usePrices } from "/path-to-customHooksFile"
import { BoxProps } from "@mui/material/Box"

interface WalletBalance {
    currency: string
    amount: number
}
interface FormattedWalletBalance {
    currency: string
    amount: number
    formatted: string
}

const WalletPage: React.FC<BoxProps> = (props: BoxProps) => {
    const { children, ...rest } = props
    const balances = useWalletBalances()
    const prices = usePrices()

    const getPriority = (blockchain: any): number => {
        switch (blockchain) {
            case "Osmosis":
                return 100
            case "Ethereum":
                return 50
            case "Arbitrum":
                return 30
            case "Zilliqa":
            case "Neo":
                return 20
            default:
                return -99
        }
    }

    const sortedBalances = useMemo(() => {
        return balances
            .filter((balance: WalletBalance) => {
                const balancePriority = getPriority(balance.currency)
                if (balancePriority > -99) {
                    if (balance.amount > 0) {
                        return true
                    }
                }
                return false
            })
            .sort((lhs: WalletBalance, rhs: WalletBalance) => {
                const leftPriority = getPriority(lhs.currency)
                const rightPriority = getPriority(rhs.currency)
                if (leftPriority > rightPriority) {
                    return -1
                } else if (rightPriority > leftPriority) {
                    return 1
                }
            })
    }, [balances, prices])

    const formattedBalances = useMemo(() => {
        return sortedBalances.map((balance: WalletBalance) => {
            return {
                ...balance,
                formatted: balance.amount.toFixed(),
            }
        })
    }, [sortedBalances])

    const rows = formattedBalances.map(
        (balance: FormattedWalletBalance, index: number) => {
            const usdValue = prices[balance.currency] * balance.amount
            return (
                <WalletRow
                    className={}
                    key={index}
                    amount={balance.amount}
                    usdValue={usdValue}
                    formattedAmount={balance.formatted}
                />
            )
        },
    )

    return <div {...rest}>{rows}</div>
}
